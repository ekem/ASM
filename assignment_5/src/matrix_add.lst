     1                                  extern printf, rand, srand
     2                                  
     3                                  section .data
     4 00000000 4900<rept>              char_matrix:	times 16 db 'I',0
     5 00000020 00000000<rept>          doubles:	times 16 dw 0,0
     6                                  ;we print only 4 bytes from each address passed to printf
     7 00000060 256420256420256420-     fmt:		db "%d %d %d %d",10,0
     8 00000069 25640A00           
     9 0000006D 25640A00                fmt_int:	db "%d",10,0
    10                                  
    11                                  section .text
    12                                  	global main
    13                                  
    14                                  ;//////////////////////
    15                                  ;// modulo
    16                                  ;// 	does modulo, requires two inputs
    17                                  ;// 	n%x
    18                                  ;// 	remainder is held in eax
    19                                  ;//////////////////////
    20                                  modulo:
    21 00000000 55                      	push ebp
    22 00000001 89E5                    	mov ebp, esp
    23 00000003 8B4508                  	mov eax, [ebp+8]	;n
    24 00000006 8B4D0C                  	mov ecx, [ebp+12]	;x
    25 00000009 29D2                    	sub edx, edx		;clear edx for math
    26 0000000B F7F1                    	div ecx			;do division
    27 0000000D 89D0                    	mov eax, edx		;place remainder in eax to return
    28 0000000F 5D                      	pop ebp
    29 00000010 C3                      	ret
    30                                  
    31                                  ;//////////////////////
    32                                  ;// do_rand
    33                                  ;//	generate a random number and limit it to a range within
    34                                  ;//	modulo
    35                                  ;//////////////////////
    36                                  do_rand:
    37 00000011 55                      	push ebp
    38 00000012 89E5                    	mov ebp, esp
    39 00000014 E8(00000000)            	call rand		;call rand
    40 00000019 FF7508                  	push dword [ebp+8]	;supply upper limit
    41 0000001C 51                      	push ecx		;rand return
    42 0000001D E8DEFFFFFF              	call modulo		;returns results in eax
    43 00000022 83C408                  	add esp, 8
    44                                  
    45 00000025 5D                      	pop ebp
    46 00000026 C3                      	ret			;eax holds results
    47                                  
    48                                  ;//////////////////////
    49                                  ;// gen_char_matrix
    50                                  ;//	generate a matrix of chars, 16 long, or 4*4
    51                                  ;//////////////////////
    52                                  gen_char_matrix:
    53                                  	;seed random
    54 00000027 54                      	push esp	;seed
    55 00000028 E8(00000000)            	call srand	;seed randon
    56 0000002D 83C404                  	add esp, 4
    57                                  
    58 00000030 BBFFFFFFFF              	mov ebx, -1	;starting place
    59                                  .l_row:
    60 00000035 43                      	inc ebx		;increment row
    61 00000036 83FB03                  	cmp ebx, 3	;4 rows?
    62 00000039 7F29                    	jg .end		;yes, so end
    63 0000003B BE00000000              	mov esi, 0	;set col to 0
    64                                  .l_col:
    65 00000040 83FE03                  	cmp esi, 3	;4 cols?
    66 00000043 7FF0                    	jg .l_row	;yes go to next row
    67 00000045 68E8030000              	push 1000			;the range of the alphabet
    68 0000004A E8C2FFFFFF              	call do_rand			;fill eax
    69 0000004F 83C404                  	add esp, 4			;adjust
    70 00000052 8884B3[00000000]        	mov [char_matrix+ebx+esi*4], al ;move vowel to matrix
    71 00000059 668984F3[20000000]      	mov [doubles+ebx+esi*8], ax
    72 00000061 46                      	inc esi			;	;next char
    73 00000062 EBDC                    	jmp .l_col			;iterate column
    74                                  .end:
    75 00000064 C3                      	ret
    76                                  
    77                                  print_matrix:
    78 00000065 55                      	push ebp
    79 00000066 89E5                    	mov ebp, esp
    80 00000068 83EC08                  	sub esp, 8
    81                                  	
    82 0000006B 8B450C                  	mov eax, [ebp+12]
    83 0000006E 29D2                    	sub edx, edx
    84 00000070 BB04000000              	mov ebx, 4
    85 00000075 F7F3                    	div ebx
    86 00000077 89450C                  	mov [ebp+12], eax
    87 0000007A 8B7508                  	mov esi, [ebp+8]	;start of array
    88 0000007D B904000000              	mov ecx, 4
    89                                  .print:
    90 00000082 837D0C01                	cmp dword [ebp+12], 1
    91 00000086 7402                    	je .isbyte
    92 00000088 7F04                    	jg .isword
    93                                  .isbyte:
    94 0000008A 8A06                    	mov al, [esi]
    95 0000008C EB05                    	jmp .write
    96                                  .isword:
    97 0000008E 668B06                  	mov ax, [esi]
    98 00000091 EB00                    	jmp .write
    99                                  .write:
   100 00000093 50                      	push eax
   101 00000094 03750C                  	add esi, [ebp+12]
   102 00000097 E2E9                    	loop .print
   103 00000099 68[60000000]            	push fmt	
   104 0000009E E8(00000000)            	call printf
   105 000000A3 83C414                  	add esp, 20
   106 000000A6 89EC                    	mov esp, ebp		;deallocate local vars
   107 000000A8 5D                      	pop ebp
   108 000000A9 C3                      	ret			;return
   109                                  
   110                                  exit:
   111 000000AA BB00000000              	mov ebx, 0		;success
   112 000000AF B801000000              	mov eax, 1
   113 000000B4 CD80                    	int 0x80		;interrupt
   114 000000B6 C3                      	ret			;return
   115                                  
   116                                  main:
   117 000000B7 E86BFFFFFF              	call gen_char_matrix	;generate our matrix
   118 000000BC 6A04                    	push 4
   119 000000BE 68[00000000]            	push char_matrix
   120 000000C3 E89DFFFFFF              	call print_matrix	;print our matrix
   121 000000C8 83C408                  	add esp, 8
   122                                  
   123 000000CB 6A08                    	push 8
   124 000000CD 68[20000000]            	push doubles
   125 000000D2 E88EFFFFFF              	call print_matrix	;print our matrix
   126 000000D7 83C408                  	add esp, 8
   127 000000DA E8CBFFFFFF              	call exit		;exit with ok
